// Code generated by go-bindata.
// sources:
// public/swagger/swagger.json
// public/swagger/swagger.yaml
// DO NOT EDIT!

package swagger

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _publicSwaggerSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x4b\x6f\x1b\x37\x10\xfe\x2b\x83\x49\x0f\x6d\xb1\xb6\x94\x27\xda\x2d\x7a\x68\xe3\x1a\x35\x8c\x22\x86\xed\xe6\x52\x18\xc5\x88\x1c\x49\x0c\xb8\xe4\x9a\x0f\xd9\x86\xb0\xff\xbd\x18\xee\x4a\x96\x14\x2b\xb6\x81\xb4\xa7\x9e\xb4\x22\x87\xf3\xf8\xbe\x6f\xc8\x59\x62\xbc\xa1\xd9\x8c\x03\xd6\xf8\xea\x70\x8c\x15\x1a\x37\xf5\x58\x2f\x31\x99\x64\x19\x6b\x7c\xef\x9b\xc6\x3b\x88\x1c\x16\x46\x31\xfc\x72\x76\x12\x41\x7b\x95\x1b\x76\x89\x92\xf1\x0e\x2b\xd4\x1c\x55\x30\x6d\xf9\x57\xe3\xe5\xdc\x44\xb1\x03\xe3\x94\xcd\x9a\x23\x10\x58\x13\x13\xf8\x29\xa8\xde\x5b\x4e\xc6\x9a\x64\x38\xc2\xcd\xdc\xa8\x39\x28\x72\x30\x61\xc8\x91\x35\x4c\xee\x80\xdc\x1d\xb4\x14\x92\x51\xa6\x25\x97\x22\x18\x07\x3e\x07\x88\x77\x31\x71\x83\x15\x2e\x38\xc4\x3e\x18\x76\x15\xce\x7d\x4c\x58\xa3\xf5\x8a\xac\x7c\xd7\xaf\xc7\xe3\x97\x58\x61\x54\x73\x6e\x38\x62\xfd\x17\xce\x53\x6a\xf1\xaa\x42\xe5\x5d\xcc\xc3\x1a\xb5\xad\x35\xaa\xd4\x30\xfa\x14\x4b\x21\x9b\x4b\xb7\x8d\xdd\x59\x99\xf9\xc9\xae\xcd\x81\xac\x5d\x55\xd8\x06\xaf\xb3\xfa\x17\xfc\x52\x9a\x47\xa1\x63\x44\xad\x19\x2d\xc6\xa3\x98\x7c\xa0\x19\xcb\x52\x5b\xca\x5e\x62\xa2\x59\x89\x7b\x31\x6c\x5d\x55\x18\x73\xd3\x50\xb8\xc3\x1a\x49\x6b\x58\x6d\xec\x12\xf5\x67\x6b\x3d\x69\x98\x1a\xcb\x90\x3c\x9c\x9c\x1d\x5f\x40\x8e\xc6\xcd\xa0\xc9\x36\x19\x61\x00\x4a\x90\x0a\x7d\xcb\xa1\xa4\x76\xa2\xb1\x5e\x45\x7a\x41\x5a\xe3\x36\xa6\xeb\x83\xa3\xa9\x0f\xcd\x81\xa6\x44\x5f\x82\x67\xe1\xf4\xe1\xcc\xd3\x21\x87\xe0\x03\x56\x98\xf8\x36\x8d\x5a\x4b\xc6\xf5\xc5\x07\x6a\x38\x71\x90\x73\x4b\x74\xd4\x88\x20\x25\xdd\xa2\x53\xf9\xf6\xa1\x39\x92\x18\xbb\xa5\x0d\x46\x81\xaf\xb3\x09\xac\xb1\x4e\x21\x73\x85\xe9\xae\x5d\xbb\xe8\xae\x64\x3f\xb6\xde\x45\x2e\x10\xbf\x1a\x8f\xe5\x67\xdb\xd1\x87\x53\x51\xd8\x9b\x87\xb6\x7e\x25\x0d\xe7\x7c\x9d\xb9\x20\x54\xc4\x46\x62\xf5\x4d\xe0\x29\xd6\xf8\x62\xa4\x79\x6a\x9c\x11\xeb\x38\xea\x2b\xec\xba\x0a\xdf\x3e\xe4\xeb\xc4\x25\x0e\x8e\x2c\x5c\x70\x58\x70\x80\xdf\x06\x40\x9e\xe8\xb5\x7b\x40\xec\xb2\xb8\xa3\x9a\xd1\x92\xb4\x0e\x1c\x63\x27\x1e\x67\xfc\xb8\x7c\x14\xa5\xbd\xf2\x79\x4f\x09\xd2\x9c\x7b\xfd\x18\xd7\xeb\x87\x12\xd4\x43\x90\xbd\xb2\x51\x24\x80\x3d\x55\x13\x45\x0e\x23\x51\xc6\x7e\x4d\xdc\x47\x2c\xb2\x90\xae\xf9\x2c\xdd\x3e\xbd\xb5\xe1\x1e\x69\xc4\x14\x8c\x9b\x3d\x4b\x1c\xff\x29\xa1\xfd\xf9\xd1\x52\x40\x97\x32\x37\x99\xbc\xa7\xed\xc8\xdf\xb8\xd2\xdb\x6d\x9e\x58\xa3\x56\xa7\x3e\x63\xe4\xac\x6c\xbf\x58\xed\x7f\xbf\xf2\x8a\x5f\x6a\xbe\xc1\x60\x3f\xd2\xe7\x6c\x29\x99\xc5\xa0\x8c\xc1\xe4\x6b\xe0\x7d\x2c\xfe\xf4\x50\x1b\xeb\x2d\x38\xb7\x5a\xbb\xb4\xec\x9b\x3d\x0e\x9c\x4f\x30\xf5\xd9\xe9\xaf\x41\x47\xff\x7a\x3e\x9b\x8f\xe1\xd8\x7e\x42\x06\x83\xff\x19\x79\x16\x23\x9d\x14\xbe\x36\x16\x27\xbd\xfd\xc6\x3c\xf3\x07\x6b\x43\x92\x1a\x18\xcd\x2e\x99\xa9\xe1\x50\xc3\xde\x0b\xe8\x27\x58\x18\xbe\xf9\x59\xf3\x94\xb2\x95\x6b\x6b\xa8\xca\x4f\x3e\xb1\x1a\xae\xb1\x96\x83\xcc\x32\x12\x45\x79\xcd\x1b\xb5\x0f\x58\xee\xd2\x41\x6e\x33\xe0\x41\x6c\x59\x99\xa9\x51\x50\x22\x82\xf8\xa8\x80\x6f\x5b\xb9\xa9\x58\x03\xc9\x00\xd5\x7b\x82\x05\xd9\xcc\x87\x58\x21\xdf\x52\xd3\x96\x82\x8c\x5b\x90\x35\xfa\xef\xb2\x85\x05\x81\x44\xc6\x3e\x21\x0b\x98\xe7\x86\xdc\x41\x60\xd2\x34\xb1\x2c\x21\x2d\xb9\x92\x13\xac\x73\x4a\x1e\x92\x0c\x74\x5e\xa9\x1c\x02\x3b\xc5\x32\xc7\xc9\xbd\xdf\x06\x3f\xb1\xdc\x6c\x67\xf3\x51\xb2\x10\x8b\x93\x23\x68\x72\x4c\x32\xd6\x91\x03\xe3\x12\xcb\x94\xd9\x55\x68\xf4\x53\x52\xcb\xce\x5c\xe7\x4d\x8e\x60\xea\x43\x9f\x49\x3f\x19\x66\x4b\xe1\xa9\x49\xbd\x3e\x7e\x79\x7c\xfa\xf1\xfc\x5c\xc2\x37\x9c\x36\xd5\xb9\xe6\x71\x37\x01\xb1\x83\x7e\x17\x94\x77\x89\x8c\x13\x02\x9c\xf0\x95\xc8\x69\x0a\xba\xd8\x1c\xc8\xc0\x1c\x9a\x1e\x35\x9a\xf8\xdc\x3f\x8a\x85\xca\xad\x2c\x44\x82\x0d\xc7\x44\x4d\x8b\xf5\xcb\x37\x6f\x7f\x78\x37\xfe\x71\xfc\xee\x5d\x57\xc9\xeb\x55\x04\x4b\xf6\x6c\x43\x4c\xd2\x94\xa2\xf2\x44\x29\xc7\xc7\x21\x93\xa0\xbf\x5f\x5e\x9e\x41\x7f\xa0\xa8\x68\xa5\xb2\x49\x3f\xe0\xf5\xe8\xf5\x00\x3d\x43\x60\x32\xfc\xf4\x9d\xb5\x19\xaf\x3c\x68\xb0\xba\x21\xa0\x91\xb6\x82\xd2\x57\xdf\x0e\xcd\x52\x3a\xe7\xbb\x6d\x08\xfa\xfe\xd8\xd1\xec\xbd\x64\x1f\x93\x4f\xaf\x9e\x7b\x3e\x37\xe8\xdc\x83\xed\x0a\xbe\xa1\x8a\x6e\xe7\x52\xfb\x70\xfa\xf0\xab\xde\x75\xff\x04\x00\x00\xff\xff\x8e\x2e\xb2\x2b\x1a\x0d\x00\x00")

func publicSwaggerSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_publicSwaggerSwaggerJson,
		"public/swagger/swagger.json",
	)
}

func publicSwaggerSwaggerJson() (*asset, error) {
	bytes, err := publicSwaggerSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/swagger/swagger.json", size: 3354, mode: os.FileMode(420), modTime: time.Unix(1542452517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _publicSwaggerSwaggerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\xdf\x4f\x23\x37\x10\xc7\xdf\xf7\xaf\x18\x85\x4a\xf4\x57\x48\xb8\xe3\x50\x6f\xab\x3e\xb4\x47\x51\x11\xaa\x40\x40\xef\xb5\x9a\xd8\x93\xc4\x27\xaf\x6d\xec\x71\x00\x9d\xfa\xbf\x57\xf6\xee\x26\xbb\x4b\xf8\xd5\xf2\xd0\x4a\xf7\x96\xd8\x33\x9e\xef\xcc\x7c\x3c\xd6\x0a\x6b\x42\xac\x28\x94\xc5\x18\xd0\x39\xad\x04\xb2\xb2\x66\xf2\x29\x58\x33\x58\xba\xad\xf4\x60\x65\x61\x67\x43\x9b\x71\x5a\x93\x34\x57\x46\xa5\x85\x50\x16\x00\xe4\xbd\xf5\xe9\x07\x80\xa4\x20\xbc\x72\x69\xab\x84\x5f\xd3\x3a\x78\x0a\xce\x9a\x40\x50\x91\x54\x08\x7c\xe7\x08\xbe\x96\x34\xc7\xa8\x19\x56\x8a\x6e\xbe\xc9\x9e\x74\x8b\x95\xd3\x54\x1f\x03\x20\xac\xa4\x12\x94\x59\xa1\x56\xf2\xcf\x15\xea\x48\xcd\x8e\x24\x46\xa5\x4b\xf8\x98\xd6\xc0\xce\xe1\xe4\x08\xaa\x18\x18\x66\x04\x68\x40\x19\xa6\x05\xf9\xc6\x58\xc9\x12\xde\x1e\xef\x1f\x9f\x7e\xbc\xb8\x68\x96\x2a\x62\x6c\xa3\x00\xb0\xaa\x28\x30\x56\xae\x84\xfd\xbd\x83\x77\x3f\x1c\x4e\xdf\x4f\x0f\x0f\xe9\xbb\xe9\xfb\xc6\x24\x30\x72\x0c\x25\x8c\x0e\xa6\xd3\x51\x5e\x73\xde\x3a\xf2\xac\x28\xf4\xc4\xae\x8f\xec\xd5\x00\x4d\xb7\x7e\xe3\xe0\x48\xa8\xb9\x12\x75\xcd\xb2\xe3\xf7\x40\xb7\xce\x53\x08\x24\x01\x03\x20\x04\xf6\xca\x2c\x20\xe7\xbc\xb7\x3e\xb5\xad\xcf\xd6\x9a\x40\x2e\x6b\xd9\xb8\xf6\x0b\xf5\x80\x2e\x58\xc6\x0a\xcd\xd8\x13\x4a\x9c\x69\x4a\x22\x34\x9a\xac\x12\xd6\x2a\xd9\x02\x2f\x55\x00\x2b\x44\xf4\x9e\x8c\xc8\x05\xe7\xe5\x26\x6e\x2e\xc7\x4c\x53\xb5\x45\xe9\xb3\x3a\xb4\x55\xba\x92\x0f\xca\x8e\x46\x5d\x47\x02\x25\xc9\xb0\x9a\x2b\xf2\x30\xb7\xbe\x56\xe9\xd0\xb3\x12\x51\xa3\xbf\x2f\xf8\x11\x99\x03\x3e\xb6\x0a\xea\x43\x83\x52\x66\xfa\x51\x9f\x6f\x58\x00\xf6\x9d\x7e\x0c\x54\x27\x7f\xb0\xb3\x4f\x24\x18\x84\x35\x8c\xca\xa4\x1e\x9b\x84\x04\xa3\x91\xe8\x65\xb6\x19\x2b\x33\xb7\xbe\xaa\xdb\x80\x33\x1b\xb9\x53\xe9\x94\x46\xe6\xe6\x7e\x12\x5d\xab\xa7\x88\x6e\x13\xac\xe5\xf4\x31\xdf\xae\x3f\x05\xfe\xed\xea\xea\xbc\xb1\xca\xd8\xb6\x58\x27\x76\x5a\x4c\x9a\x1a\xf7\x89\xee\x48\x7b\x92\xed\xcd\x25\xdb\xda\x07\x56\x9c\xac\x76\x7f\x4f\x93\x24\x0f\x92\x0d\x06\x65\x6f\x4e\xad\x8c\xdc\x5b\x58\xdc\xcb\xe5\xfa\x31\x8f\x99\x9f\x9a\x99\xb3\x5b\xdc\x2b\xc1\xd2\x06\x2e\x41\x5b\x81\x3a\xff\x7c\x3b\x9d\xee\x17\xa9\x13\xa9\x1e\xbd\x4a\x5c\xa5\x34\x7f\x3e\x3f\x01\x65\x84\x8e\x92\xd2\x7d\xd5\x2a\x70\xa2\x4c\xd8\xaa\xb2\x06\x22\x2b\xad\x12\x11\x70\xb3\x54\x62\x09\x02\x4d\x02\x3f\xa6\x6a\xcc\xee\x00\xcd\x5d\x3d\x45\x32\xac\xca\xa1\xe1\x00\xca\x80\x8d\x1e\xc2\x5d\x60\xaa\x8a\x75\xa2\x1f\xea\x13\x03\xf9\x95\x12\x94\xe2\x06\x90\x56\xc4\x8a\x0c\xe7\x3c\x0b\x80\x15\xf9\x90\xa5\x8d\x46\x85\x43\x5e\xe6\x1e\x4e\xd0\xa9\xc9\x6a\x3a\x09\x6c\x3d\x2e\x1a\x3c\x5c\x4a\x6d\x3d\xb1\xda\x67\xa1\xfe\x3f\x86\x2a\x6a\x56\x49\xd4\x24\x01\x38\x96\xc8\x58\x6c\x41\xe1\x0f\xa7\x2d\x4a\x98\xab\xba\xed\x27\xe7\xc7\x97\x10\x43\xea\xe9\xfa\x80\x1c\xa8\xf1\x4d\xb7\x23\x2b\x3d\x91\x25\x5c\xd6\x6a\x76\x50\xca\x66\xdb\xa1\xc7\x8a\x98\x7c\x47\x48\x2f\x5c\x8a\xb3\xe6\x41\xa5\x05\xeb\xab\xa3\x8d\x36\x00\x83\x15\x0d\xec\x3c\x5d\x47\xe5\x49\x0e\xae\x64\xdd\xf2\x8e\xa5\xf3\x56\x46\xd1\x2d\xc2\x83\x08\xad\x2d\x98\x6e\x79\xe2\x34\x2a\x53\xb4\xc1\xea\xe7\xad\x73\x77\x46\x6f\xa6\xd3\x51\xf7\x4a\xf6\x52\x3a\x3b\xdd\x18\x1e\x3c\x66\xf8\x0b\x4a\xb8\xa0\xeb\x48\xa1\x3b\x04\x82\x58\x52\x85\x5d\x27\x80\xaf\x3c\xcd\x4b\xd8\xdd\x99\x74\x1e\xe6\x49\xd6\xbd\xbb\x89\xf5\xee\xb1\x58\x27\x86\xc9\x1b\xd4\x70\x49\x7e\x45\xbe\x7e\xba\xff\x75\xd4\xec\xd5\xad\xef\x92\xd9\xb5\x7b\xb1\xaa\xd0\xdf\x95\x69\x98\xb6\x64\x34\x5b\x8c\x8b\x8e\xcf\x66\x6f\x40\xf5\xe4\x33\x4a\x99\xc6\xcc\x5f\xb5\xf1\x82\xd6\x78\xf7\x72\xfb\x80\x9c\x27\x58\x66\x56\x99\x9a\x59\x64\x28\x1b\xf7\xc7\x50\x15\xc8\xcf\x45\xb5\x3e\xb6\x77\x64\x8d\x6c\xba\x95\x03\x5c\x87\x66\x8f\x12\xdb\x7b\x88\xfe\x09\xb3\x19\xd7\x49\x22\xf7\x35\x98\xfd\xaf\x72\x24\x90\x9f\xcb\x51\xad\x62\xf2\x39\x11\x91\xba\x73\x1f\xa0\x1e\x0c\xe7\x71\xa6\x95\xd8\x69\xdd\xbe\x6d\xdd\x9e\x4b\xc6\x05\x69\x64\xb5\x6a\x08\xec\xe1\xf0\x00\x1f\x83\x08\x2f\x01\xe4\xc5\xbd\x3d\x4e\xa2\xa4\xbd\x31\x69\xb0\x93\x7c\xa2\x59\xf7\x86\x68\x9e\x62\x07\x4f\x1c\x6f\x2c\xc3\xdc\x46\xf3\xd4\xe9\xaf\x84\xc2\x51\x93\x0d\xb8\xdc\xb9\xb6\x71\xb9\xf5\x37\xb8\x58\x90\x7f\x79\xef\x1b\xbf\x2f\xcd\xff\xdf\x35\xbf\xe9\x5c\xb1\x19\x9d\xaf\xf8\x29\xdc\xab\xf8\xd9\xe9\x96\xaf\xe0\xb3\xd3\x62\xad\xbb\x51\xdc\x48\x2a\x61\xf4\x66\x6f\x3a\x2a\xfe\x0e\x00\x00\xff\xff\xda\x7c\xda\xa9\xa4\x0f\x00\x00")

func publicSwaggerSwaggerYamlBytes() ([]byte, error) {
	return bindataRead(
		_publicSwaggerSwaggerYaml,
		"public/swagger/swagger.yaml",
	)
}

func publicSwaggerSwaggerYaml() (*asset, error) {
	bytes, err := publicSwaggerSwaggerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "public/swagger/swagger.yaml", size: 4004, mode: os.FileMode(420), modTime: time.Unix(1542452517, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"public/swagger/swagger.json": publicSwaggerSwaggerJson,
	"public/swagger/swagger.yaml": publicSwaggerSwaggerYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"public": &bintree{nil, map[string]*bintree{
		"swagger": &bintree{nil, map[string]*bintree{
			"swagger.json": &bintree{publicSwaggerSwaggerJson, map[string]*bintree{}},
			"swagger.yaml": &bintree{publicSwaggerSwaggerYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

